library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg19)
chroms<-c(paste0("chr",1:22),"chrX","chrY")
CandG=rep(NA,length(chroms))
CorG=rep(NA,length(chroms))
cgratio=rep(NA,length(chroms))
CorG_1000bp=c()
allbase_1000bp=c()
CandG_1000bp=c()
for (i in seq(length(chroms)))
{
Seq=Hsapiens[[chroms[i]]]
bases=alphabetFrequency(Seq,baseOnly=TRUE)
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", Seq)
CandG[i]=length(cg)
CorG[i]=baseFreq["C"]*baseFreq["G"]*ntotBases
cgratio[i]=length(cg)/(baseFreq["C"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(Seq), by=1000)
ss=ss[-length(ss)] ## remove the last one
Seq.set=DNAStringSet(Seq, start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
CorG_1000bp=c(CorG_1000bp,ff[,"C"]+ff[,"G"])
allbase_1000bp=c(allbase_1000bp,rowSums(ff))
CandG_1000bp=c(CandG_1000bp,vcountPattern("CG", Seq.set))
}
save(CandG,CorG,cgratio,CorG_1000bp,allbase_1000bp,CandG_1000bp,file = "../data/wholegenome.RData")
txdb = loadDb("../data/hg19_knownGenes.sqlite")
genes.hg19 = genes(txdb)
tss=start(genes.hg19)
idx=which(strand(genes.hg19)=="-")
tss[idx]=end(genes.hg19)[idx]
allchrs = as.character(seqnames(genes.hg19))
idx=c(grep("random", allchrs),grep("hap", allchrs))
tss[idx]=end(genes.hg19)[idx]
allchrs = as.character(seqnames(genes.hg19))
idx=c(grep("random", allchrs),grep("hap", allchrs))
TSS=GRanges(seqnames=Rle(allchrs[-idx]),ranges=IRanges(tss[-idx]-500,tss[-idx]+500))
CorG=c()
allbase=c()
CandG=c()
for (i in seq(length(chroms)))
{
Seq=Hsapiens[[chroms[i]]]
idx=seqnames(TSS)==chroms[i]
Seq.set=DNAStringSet(Seq, start=start(TSS[idx]), end=end(TSS[idx]))
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
CorG=c(CorG,ff[,"C"]+ff[,"G"])
allbase=c(allbase,rowSums(ff))
CandG=c(CandG,vcountPattern("CG", Seq.set))
}
save(CandG,CorG,allbase,file = "../data/TSS.RData")
png("../figs/fig2.png")
load("../data/wholegenome.RData")
load("../data/TSS.RData")
pCG=CorG_1000bp/allbase_1000bp
obsExp=CandG_1000bp*1000/CorG_1000bp
pCG.TSS=CorG/allbase
obsExp.TSS=CandG*1000/CorG
par(mfrow=c(1,2))
d1=density(pCG[pCG>0])
d2=density(pCG.TSS[pCG.TSS>0])
plot(d1, lwd=2,main="density distribution of GC content")
lines(d2, col="red",lwd=2)
legend("topright", legend=c("Genome", "TSS"), lwd=2, col=c("black", "red"))
d1=density(obsExp[!is.na(obsExp)])
d2=density(obsExp.TSS[!is.na(obsExp.TSS)])
plot(d1, lwd=2, main="density distribution of Observed to expected CG ratio")
lines(d2, col="red",lwd=2)
legend("topright", legend=c("Genome", "TSS"), lwd=2, col=c("black", "red"))
dev.off()
png("../figs/fig1.png")
load("../data/wholegenome.RData")
pCG=CorG_1000bp/allbase_1000bp
obsExp=CandG_1000bp*1000/CorG_1000bp
par(mfrow=c(1,2))
hist(pCG[pCG>0],100,main="GC content")
hist(obsExp,100, main="Observed to expected CG ratio")
dev.off()
load("../data/wholegenome.RData")
load("../data/TSS.RData")
txdb = loadDb("../data/hg19_knownGenes.sqlite")
library(AnnotationDbi)
txdb = loadDb("../data/hg19_knownGenes.sqlite")
genes.hg19 = genes(txdb)
tss=start(genes.hg19)
idx=which(strand(genes.hg19)=="-")
tss[idx]=end(genes.hg19)[idx]
allchrs = as.character(seqnames(genes.hg19))
idx=c(grep("random", allchrs),grep("hap", allchrs))
tss[idx]=end(genes.hg19)[idx]
allchrs = as.character(seqnames(genes.hg19))
idx=c(grep("random", allchrs),grep("hap", allchrs))
TSS=GRanges(seqnames=Rle(allchrs[-idx]),ranges=IRanges(tss[-idx]-500,tss[-idx]+500))
CorG=c()
allbase=c()
CandG=c()
for (i in seq(length(chroms)))
{
Seq=Hsapiens[[chroms[i]]]
idx=seqnames(TSS)==chroms[i]
Seq.set=DNAStringSet(Seq, start=start(TSS[idx]), end=end(TSS[idx]))
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
CorG=c(CorG,ff[,"C"]+ff[,"G"])
allbase=c(allbase,rowSums(ff))
CandG=c(CandG,vcountPattern("CG", Seq.set))
}
save(CandG,CorG,allbase,file = "../data/TSS.RData")
load("../data/TSS.RData")
pCG.TSS=CorG/allbase
obsExp.TSS=CandG*1000/CorG
png("../figs/fig2.png")
load("../data/wholegenome.RData")
load("../data/TSS.RData")
pCG=CorG_1000bp/allbase_1000bp
obsExp=CandG_1000bp*1000/CorG_1000bp
pCG.TSS=CorG/allbase
obsExp.TSS=CandG*1000/CorG
par(mfrow=c(1,2))
d1=density(pCG[pCG>0])
d2=density(pCG.TSS[pCG.TSS>0])
plot(d1, lwd=2,main="density distribution of GC content")
lines(d2, col="red",lwd=2)
legend("topright", legend=c("Genome", "TSS"), lwd=2, col=c("black", "red"))
d1=density(obsExp[!is.na(obsExp)])
d2=density(obsExp.TSS[!is.na(obsExp.TSS)])
plot(d1, lwd=2, main="density distribution of Observed to expected CG ratio")
lines(d2, col="red",lwd=2)
legend("topright", legend=c("Genome", "TSS"), lwd=2, col=c("black", "red"))
dev.off()
installed_pkgs <- row.names(installed.packages())
pkgs1 <- c("BiocManager", "knitr")
for(p in pkgs1){
if(!(p %in% installed_pkgs)){
install.packages(p)
}
}
pkgs2 <- c("BSgenome","BSgenome.Hsapiens.UCSC.hg19","AnnotationDbi","GenomicRanges","GenomicFeatures")
for(p in pkgs2){
if(!(p %in% installed_pkgs)){
BiocManager::install(p)
}
}
